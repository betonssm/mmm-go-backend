const express = require("express");
const router = express.Router();
const Player = require("../models/Player");

// ‚úÖ –°–Ω–∞—á–∞–ª–∞ GET /count
router.get("/count", async (req, res) => {
  try {
    const count = await Player.countDocuments();
    res.json({ totalPlayers: count });
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤" });
  }
});

// ‚¨áÔ∏è –ü–æ—Ç–æ–º GET /:telegramId —Å —É—á—ë—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
router.get("/:telegramId", async (req, res) => {
  try {
    let player = await Player.findOne({ telegramId: req.params.telegramId });

    if (!player) {
      const refId = req.query.ref;

      player = new Player({
        telegramId: req.params.telegramId,
        playerName: "–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫",
        balance: 0,
        level: 0,
        isBoostActive: false,
        isInvestor: false,
        srRating: 0,
        referrals: 0,
        totalTaps: 0,
        adsWatched: 0,
        boostCooldownUntil: null,
      });

      await player.save();
      console.log("üÜï –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω:", player);

      if (refId && refId !== req.params.telegramId) {
        try {
          const referrer = await Player.findOne({ telegramId: refId });
          if (referrer) {
            referrer.referrals += 1;
            referrer.balance += 5000; // üí∏ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            await referrer.save();
            console.log(`üë• –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç–∞–Ω! ${refId} –ø—Ä–∏–≥–ª–∞—Å–∏–ª ${req.params.telegramId}`);
          }
        } catch (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:", err);
        }
      }
    }
// –ï—Å–ª–∏ –Ω–µ—Ç dailyTasks ‚Äî —Å–æ–∑–¥–∞—ë–º –±–∞–∑—É
if (!player.dailyTasks) {
  player.dailyTasks = {
    dailyTaps: 0,
    dailyTarget: 5000,
    rewardReceived: false
  };
}

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è weeklyMission
if (!player.weeklyMission) {
  player.weeklyMission = {
    mavrodikGoal: 1000000,
    current: 0,
    completed: false
  };
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
if (typeof player.partnerSubscribed === "undefined") {
  player.partnerSubscribed = false;
}

await player.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    res.json(player);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});
// ‚¨áÔ∏è POST ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏ SR —Ä–µ–π—Ç–∏–Ω–≥
router.post("/", async (req, res) => {
  console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (POST):", req.body); 
  const {
    telegramId,
    playerName,
    balance,
    level,
    isBoostActive,
    isInvestor,
    referrals,
    totalTaps,
    adsWatched,
    srRating,
    boostCooldownUntil,
    partnerSubscribed,
    dailyTasks,
    weeklyMission,
    balanceBonus // üëà –¥–æ–±–∞–≤–∏–ª–∏!
  } = req.body;
  const player = await Player.findOne({ telegramId });

// –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
if (dailyTasks?.rewardReceived && player?.lastDailyRewardAt) {
  const now = new Date();
  const last = new Date(player.lastDailyRewardAt);
  const sameDay = now.toDateString() === last.toDateString();

  if (sameDay) {
    return res.status(400).json({ error: "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞" });
  }
}

// –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
if (weeklyMission?.completed && player?.lastWeeklyRewardAt) {
  const now = new Date();
  const last = new Date(player.lastWeeklyRewardAt);

  const sameWeek =
    now.getFullYear() === last.getFullYear() &&
    getWeekNumber(now) === getWeekNumber(last);

  if (sameWeek) {
    return res.status(400).json({ error: "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞" });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏
function getWeekNumber(d) {
  const date = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
  const dayNum = date.getUTCDay() || 7;
  date.setUTCDate(date.getUTCDate() + 4 - dayNum);
  const yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1));
  return Math.ceil((((date - yearStart) / 86400000) + 1) / 7);
}

  const updateFields = {
    telegramId,
    playerName,
    level,
    isBoostActive,
    isInvestor,
    referrals,
    totalTaps,
    adsWatched,
    srRating,
    boostCooldownUntil: boostCooldownUntil || null
  };
  if (typeof dailyTasks !== "undefined" && dailyTasks.rewardReceived) {
    updateFields["dailyTasks"] = dailyTasks;
    updateFields["lastDailyRewardAt"] = new Date(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
    console.log("üïí –î–∞—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:", updateFields.lastDailyRewardAt);
  }
  if (typeof weeklyMission !== "undefined" && weeklyMission.completed) {
    updateFields["weeklyMission"] = weeklyMission;
    updateFields["lastWeeklyRewardAt"] = new Date(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
    console.log("üìÜ –î–∞—Ç–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:", updateFields.lastWeeklyRewardAt);
  }

  // üëá –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –∫ –±–∞–ª–∞–Ω—Å—É
  if (typeof balanceBonus !== "undefined" && balanceBonus > 0) {
    const player = await Player.findOne({ telegramId });
    if (player) {
      updateFields.balance = (player.balance || 0) + balanceBonus;
    }
  } else if (typeof balance !== "undefined") {
    updateFields.balance = balance;
  }

  if (typeof partnerSubscribed !== "undefined") {
    updateFields.partnerSubscribed = partnerSubscribed;
  }

  if (dailyTasks) {
    updateFields.dailyTasks = dailyTasks;
  }

  if (weeklyMission) {
    updateFields.weeklyMission = weeklyMission;
  }

  try {
    const updated = await Player.findOneAndUpdate(
      { telegramId },
      updateFields,
      { upsert: true, new: true }
    );

    res.json(updated);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞", details: err });
  }
});

module.exports = router;