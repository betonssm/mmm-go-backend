require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const plisioRoutes = require("./routes/plisio");
app.use("/plisio", plisioRoutes);

const app = express();
app.use(cors());
app.use(express.json());

const playerRoutes = require("./routes/player");
app.use("/player", playerRoutes);

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log("MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω"))
  .catch(err => console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err));

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
const cron = require("node-cron");
const Player = require("./models/Player");

// üïì –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ø–æ UTC
cron.schedule("0 0 * * *", async () => {
  console.log("‚è∞ –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...");

  try {
    await Player.updateMany({}, {
      $set: {
        "dailyTasks.dailyTaps": 0,
        "dailyTasks.rewardReceived": false,
        adsWatched: 0
      }
    });

    console.log("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:", err);
  }
});

// üïñ –°–±—Ä–æ—Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:00
cron.schedule("0 0 * * 1", async () => {
  console.log("üìÜ –°–±—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–π –º–∏—Å—Å–∏–∏...");

  try {
    await Player.updateMany({}, {
      $set: {
        "weeklyMission.current": 0,
        "weeklyMission.completed": false
      }
    });

    console.log("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –º–∏—Å—Å–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π –º–∏—Å—Å–∏–∏:", err);
  }
});